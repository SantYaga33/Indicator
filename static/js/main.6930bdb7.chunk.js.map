{"version":3,"sources":["Main/SetComponents/ScreenComponent/SetScreen.module.css","Main/Components/ScreenComponent/Screen.module.css","Main/Components/ButtonsComponent/Buttons.module.css","Main/SetComponents/ButtonsComponent/SetButton.module.css","Main/Components/Main.module.css","Main/SetComponents/SetCounter.module.css","App.module.css","Main/Components/ScreenComponent/Screen.jsx","Main/Components/ButtonsComponent/ButtonCopmponent/CreateButton.jsx","Main/Components/ButtonsComponent/Buttons.jsx","Main/Components/Main.jsx","Main/SetComponents/ScreenComponent/CreateInput.jsx","Main/SetComponents/ScreenComponent/SetScreen.jsx","Main/SetComponents/ButtonsComponent/ButtonCopmponent/CreateButton.jsx","Main/SetComponents/ButtonsComponent/SetButton.jsx","Main/SetComponents/SetConter.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Screen","render","currentClass","props","state","countColor","styles","screen_text","screen_red","screen_error","screen_green","className","screen","screenTitle","React","Component","CreatButton","id","title","buttonStatus","onClick","disabled","Buttons","analyzeBtnStatus","e","target","currentTarget","getAttribute","addCount","reset","buttonsList","buttons","map","el","index","key","activeClassBtn","button_wrap","Main","main_container","main_wrap","CreatInput","type","pattern","onChange","value","placeholder","SetScreen","analyzeInputStatus","setMaxValue","setStartValue","inputError","input_red","InputList","inputs","discr_wrap","discr","input_wrap","SetButton","setCountValue","SetCounter","App","startCountValue","maxCountValue","startCountStore","maxCountStore","activeClassInp","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","setState","button","repeatCode","currentCount","main","this","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,OAAS,0BAA0B,WAAa,8BAA8B,MAAQ,yBAAyB,WAAa,8BAA8B,UAAY,+B,oBCAxLD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,4BAA4B,aAAe,6BAA6B,WAAa,2BAA2B,aAAe,+B,gBCA/LD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,+B,gBCAnED,EAAOC,QAAU,CAAC,QAAU,2BAA2B,YAAc,iC,gBCArED,EAAOC,QAAU,CAAC,UAAY,wBAAwB,eAAiB,+B,gBCAvED,EAAOC,QAAU,CAAC,UAAY,8BAA8B,eAAiB,qC,mBCA7ED,EAAOC,QAAU,CAAC,KAAO,oB,qOCiBVC,E,2MAbdC,OAAS,WACR,IAAIC,EAA+C,SAAhC,EAAKC,MAAMC,MAAMC,WAAwBC,IAAOC,YAClC,QAAhC,EAAKJ,MAAMC,MAAMC,WAAuBC,IAAOE,WAA6C,UAAhC,EAAKL,MAAMC,MAAMC,WAC5EC,IAAOG,aAAeH,IAAOI,aAC/B,OAEC,yBAAKC,UAAWL,IAAOM,QACtB,yBAAKD,UAAWT,GAAe,EAAKC,MAAMC,MAAMS,e,6BAT/BC,IAAMC,W,gBCKZC,EANK,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,GAAGC,EAA0C,EAA1CA,MAAMC,EAAoC,EAApCA,aAAaC,EAAuB,EAAvBA,QAAQT,EAAe,EAAfA,UAEnD,OAAO,4BAAUU,SAAUF,EAAcC,QAASA,EAASH,GAAIA,EAC1DN,UAAWA,GAAYO,ICyBdI,EA1BC,SAACnB,GAEhB,IAAMoB,EAAmB,SAACC,GACzB,IAAIC,EAASD,EAAEE,cAEqB,MAA/BD,EAAOE,aAAc,MACzBxB,EAAMyB,WACoC,MAA/BH,EAAOE,aAAc,OAChCxB,EAAM0B,SAKFC,EAAc3B,EAAMC,MAAM2B,QAAQC,KAAK,SAACC,EAAIC,GAAL,OAAyB,IAAVA,GAC3D,kBAAC,EAAD,eAAaC,IAAKF,EAAGhB,IAAQgB,EAA7B,CAAiCb,QAASG,EACtCZ,UAAWL,IAAO2B,EAAGG,sBAE1B,OACC,yBAAKzB,UAAWL,IAAOyB,SACtB,yBAAKpB,UAAWL,IAAO+B,aACrBP,KCPUQ,EAXF,SAACnC,GACb,OACC,yBAAKQ,UAAWL,IAAOiC,gBACtB,yBAAK5B,UAAWL,IAAOkC,WACtB,kBAAC,EAAD,CAAQpC,MAAOD,EAAMC,QACrB,kBAAC,EAAD,CAASA,MAAOD,EAAMC,MAAOwB,SAAUzB,EAAMyB,SAAUC,MAAO1B,EAAM0B,W,iCCDzDY,EARI,SAAC,GAAsD,IAArDxB,EAAoD,EAApDA,GAAGN,EAAiD,EAAjDA,UAAU+B,EAAuC,EAAvCA,KAAKC,EAAkC,EAAlCA,QAAQC,EAA0B,EAA1BA,SAA0B,EAAjBC,MAAiB,EAAXzC,MAI7D,OAAO,2BAAQa,GAAIA,EAAKyB,KAAMA,EAAM/B,UAAWA,EAAWgC,QAASA,EAASC,SAAUA,EAChFE,YAAY,+EC6BJC,E,2MA9BdC,mBAAqB,SAACxB,GACrB,IAAIC,EAASD,EAAEE,cAEkB,MAA9BD,EAAOE,aAAa,MACtB,EAAKxB,MAAM8C,YAAYzB,GACgB,MAA9BC,EAAOE,aAAa,OAC7B,EAAKxB,MAAM+C,cAAc1B,I,EAI3BvB,OAAS,WACR,IAAIC,EAAe,EAAKC,MAAMC,MAAM+C,WAAa7C,IAAO8C,UAAY,GAE9DC,EAAY,EAAKlD,MAAMC,MAAMkD,OAAOtB,KAAK,SAAAC,GAAE,OAAG,kBAAC,EAAD,eAAYE,IAAKF,EAAGhB,GAAIyB,KAAM,UAAcT,EAA5C,CAAgDY,MAAOZ,EAAGY,MAC9FlC,UAAWT,EAAcyC,QAAS,WAClCC,SAAU,EAAKI,mBAAoB5C,MAAO,EAAKD,MAAMC,YACrE,OACC,yBAAKO,UAAWL,IAAOM,QACtB,yBAAKD,UAAWL,IAAOiD,YACtB,0BAAM5C,UAAWL,IAAOkD,OAAxB,aACA,0BAAM7C,UAAWL,IAAOkD,OAAxB,gBAED,yBAAK7C,UAAWL,IAAOmD,YACrBJ,K,6BAzBkBvC,IAAMC,W,gBCIfC,EANK,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,GAAGC,EAA0C,EAA1CA,MAAMC,EAAoC,EAApCA,aAAaC,EAAuB,EAAvBA,QAAQT,EAAe,EAAfA,UAEnD,OAAO,4BAAUU,SAAUF,EAAcC,QAASA,EAASH,GAAIA,EAC1DN,UAAWA,GAAYO,ICsBdwC,EAvBG,SAACvD,GAElB,IAAMoB,EAAmB,SAACC,GAGQ,MAFpBA,EAAEE,cAELC,aAAa,OACtBxB,EAAMwD,iBAIF7B,EAAc3B,EAAMC,MAAM2B,QAAQC,KAAK,SAACC,EAAIC,GAAL,OAAsB,IAARA,GACjD,kBAAC,EAAD,eAAaC,IAAKF,EAAGhB,IAAQgB,EAA7B,CAAiCb,QAASG,EACtCZ,UAAWL,IAAO2B,EAAGG,sBAEnC,OACC,yBAAKzB,UAAWL,IAAOyB,SACtB,yBAAKpB,UAAWL,IAAO+B,aACrBP,KCLU8B,EAXI,SAACzD,GACnB,OACC,yBAAKQ,UAAWL,IAAOiC,gBACtB,yBAAK5B,UAAWL,IAAOkC,WACtB,kBAAC,EAAD,CAAWpC,MAAOD,EAAMC,MAAO6C,YAAa9C,EAAM8C,YAAaC,cAAe/C,EAAM+C,gBACpF,kBAAC,EAAD,CAAW9C,MAAOD,EAAMC,MAAOuD,cAAexD,EAAMwD,mBCiLzCE,E,YApLd,WAAa1D,GAAQ,IAAD,8BACnB,4CAAOA,KAGRC,MAAQ,CAEP0D,gBAAiB,EACjBC,cAAe,EACfC,gBAAiB,EACjBC,cAAe,EACfpD,YAAa,8BACbR,WAAY,OACZ8C,YAAY,EACZpB,QAAS,CACR,CAAEd,GAAI,EAAGC,MAAO,MAAOC,cAAc,EAAMiB,eAAgB,gBAC3D,CAAEnB,GAAI,EAAGC,MAAO,QAASC,cAAc,EAAMiB,eAAgB,cAC7D,CAAEnB,GAAI,EAAGC,MAAO,MAAOC,cAAc,EAAMiB,eAAgB,iBAE5DkB,OAAQ,CACP,CAAErC,GAAI,EAAGiD,eAAgB,IACzB,CAAEjD,GAAI,EAAGiD,eAAgB,MApBP,EA6BpBC,UAAY,WACX,IAAIC,EAAgBC,KAAKC,UAAY,EAAKlE,OAC1CmE,aAAaC,QAAS,cAAeJ,IA/BlB,EAkCpBK,aAAe,WACd,IAAIrE,EAAQ,CACX0D,gBAAiB,EACjBC,cAAe,EACfC,gBAAiB,EACjBC,cAAe,EACfpD,YAAa,8BACbR,WAAY,OACZ8C,YAAY,EACZpB,QAAS,CACR,CAAEd,GAAI,EAAGC,MAAO,MAAOC,cAAc,EAAMiB,eAAgB,gBAC3D,CAAEnB,GAAI,EAAGC,MAAO,QAASC,cAAc,EAAMiB,eAAgB,cAC7D,CAAEnB,GAAI,EAAGC,MAAO,MAAOC,cAAc,EAAMiB,eAAgB,iBAE5DkB,OAAQ,CACP,CAAErC,GAAI,EAAGiD,eAAgB,IACzB,CAAEjD,GAAI,EAAGiD,eAAgB,MAGvBE,EAAgBG,aAAaG,QAAS,eACnB,OAAlBN,IACJhE,EAAQiE,KAAKM,MAAOP,IAErB,EAAKQ,SAAWxE,IAzDG,EA4DpBwB,SAAW,WACL,EAAKxB,MAAM0D,gBAAkB,EAAK1D,MAAM2D,eAC5C,EAAKa,SAAU,CACdd,gBAAiB,EAAK1D,MAAM0D,gBAAkB,IAC5C,WACF,EAAKK,YACA,EAAK/D,MAAM0D,kBAAoB,EAAK1D,MAAM2D,cAC9C,EAAKa,SAAU,CACdvE,WAAY,MACZQ,YAAa,EAAKT,MAAM0D,gBACxB/B,QAAS,EAAK3B,MAAM2B,QAAQC,KAAK,SAAA6C,GAChC,OAAmB,IAAdA,EAAO5D,GACJ,eAAK4D,EAAZ,CAAoB1D,cAAc,EAAMiB,eAAgB,eAEjDyC,OAKV,EAAKD,SAAU,CACd/D,YAAa,EAAKT,MAAM0D,kBACtB,WAAO,EAAKK,mBAjFC,EAuFpBtC,MAAQ,WACP,EAAK+C,SAAU,CACdvE,WAAY,QACZQ,YAAa,EAAKT,MAAM4D,gBACxBF,gBAAiB,EAAK1D,MAAM4D,gBAC5BD,cAAe,EAAK3D,MAAM6D,cAC1BlC,QAAS,EAAK3B,MAAM2B,QAAQC,KAAK,SAAA6C,GAChC,OAAmB,IAAdA,EAAO5D,GACJ,eAAK4D,EAAZ,CAAoB1D,cAAc,EAAOiB,eAAgB,iBAElDyC,OAGP,WAAO,EAAKV,gBApGI,EAuGpBR,cAAgB,WACf,EAAKiB,SAAU,CAGdZ,gBAAiB,EAAK5D,MAAM0D,gBAC5BG,cAAe,EAAK7D,MAAM2D,cAC1B1D,WAAY,QAEZQ,YAAa,EAAKT,MAAM0D,gBACxB/B,QAAS,EAAK3B,MAAM2B,QAAQC,KAAK,SAAA6C,GAChC,OAAmB,IAAdA,EAAO5D,IAA0B,IAAd4D,EAAO5D,GACvB,eAAK4D,EAAZ,CAAoB1D,cAAc,IACT,IAAd0D,EAAO5D,GACX,eAAK4D,EAAZ,CAAoB1D,cAAc,IAE3B0D,OAGP,WAAO,EAAKV,gBAzHI,EA4HpBW,WAAa,SAACC,GACRA,EAAe,GAAK,EAAK3E,MAAM2D,cAAgB,EAAK3D,MAAM0D,iBAC9D,EAAK1D,MAAM2D,gBAAkB,EAAK3D,MAAM0D,gBACxC,EAAKc,SAAU,CACdzB,YAAY,EACZtC,YAAa,kBACbR,WAAY,QACZ0B,QAAS,EAAK3B,MAAM2B,QAAQC,KAAK,SAAA6C,GAChC,OAAmB,IAAdA,EAAO5D,GACJ,eAAK4D,EAAZ,CAAoB1D,cAAc,IAE3B0D,OAGP,WAAO,EAAKV,eAEf,EAAKS,SAAU,CACd/D,YAAa,8BACbR,WAAY,OACZ8C,YAAY,EACZpB,QAAS,EAAK3B,MAAM2B,QAAQC,KAAK,SAAA6C,GAChC,OAAmB,IAAdA,EAAO5D,IAA0B,IAAd4D,EAAO5D,GACvB,eAAK4D,EAAZ,CAAoB1D,cAAc,IACT,IAAd0D,EAAO5D,GACX,eAAK4D,EAAZ,CAAoB1D,cAAc,IAE3B0D,OAGP,WAAO,EAAKV,gBAzJG,EA6JpBlB,YAAc,SAACzB,GACd,EAAKoD,SAAU,CACdb,eAAgBvC,EAAEE,cAAcmB,QAC9B,WAAO,EAAKiC,WAAY,EAAK1E,MAAM2D,mBAhKnB,EAkKpBb,cAAgB,SAAC1B,GAChB,EAAKoD,SAAU,CACdd,iBAAkBtC,EAAEE,cAAcmB,QAChC,WAAO,EAAKiC,WAAY,EAAK1E,MAAM0D,qBArKnB,EAwKpB7D,OAAS,WACR,OACC,yBAAKU,UAAWL,IAAO0E,MACtB,kBAAC,EAAD,CAAY5E,MAAO,EAAKA,MAAOuD,cAAe,EAAKA,cAAeV,YAAa,EAAKA,YACjFC,cAAe,EAAKA,gBACvB,kBAAC,EAAD,CAAM9C,MAAO,EAAKA,MAAOwB,SAAU,EAAKA,SAAUC,MAAO,EAAKA,UA7K7C,E,iFA0BnBoD,KAAKR,mB,GA3BW3D,IAAMC,WCMJmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAStF,OAAO,kBAAC,EAAD,MAASuF,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6930bdb7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"SetScreen_screen__14w0S\",\"discr_wrap\":\"SetScreen_discr_wrap__3XSyp\",\"discr\":\"SetScreen_discr__3UNMD\",\"input_wrap\":\"SetScreen_input_wrap__3wxak\",\"input_red\":\"SetScreen_input_red__3edeD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"Screen_screen__Na0iP\",\"screen_text\":\"Screen_screen_text__M72zX\",\"screen_green\":\"Screen_screen_green__2vkda\",\"screen_red\":\"Screen_screen_red__1na5z\",\"screen_error\":\"Screen_screen_error__36vNy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Buttons_buttons__2eYzo\",\"button_wrap\":\"Buttons_button_wrap__1fq30\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"SetButton_buttons__wQz_s\",\"button_wrap\":\"SetButton_button_wrap__2poq9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_wrap\":\"Main_main_wrap__22wje\",\"main_container\":\"Main_main_container__Hj_-_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_wrap\":\"SetCounter_main_wrap__o7QF_\",\"main_container\":\"SetCounter_main_container__33rOv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__1rWcx\"};","import React from 'react';\r\nimport styles from './Screen.module.css';\r\n\r\nclass Screen extends React.Component {\r\n\r\n\trender = () => {\r\n\t\tlet currentClass = this.props.state.countColor === 'text' ? styles.screen_text :\r\n\t\t\tthis.props.state.countColor === 'red' ? styles.screen_red : this.props.state.countColor === 'error' ?\r\n\t\t\t\tstyles.screen_error : styles.screen_green;\r\n\t\treturn (\r\n\r\n\t\t\t<div className={styles.screen}>\r\n\t\t\t\t<div className={currentClass}>{this.props.state.screenTitle}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Screen;\r\n","import React from 'react';\r\n\r\nconst CreatButton = ({id,title,buttonStatus,onClick,className}) => {\r\n\r\n\treturn <button   disabled={buttonStatus} onClick={onClick} id={id}\r\n\t\t\t\t\t className={className}>{title}</button>\r\n};\r\n\r\nexport default CreatButton;\r\n","import React from 'react';\r\nimport styles from './Buttons.module.css';\r\nimport CreatButton from \"./ButtonCopmponent/CreateButton\";\r\n\r\nconst Buttons = (props) => {\r\n\r\n\tconst analyzeBtnStatus = (e) => {\r\n\t\tlet target = e.currentTarget;\r\n\r\n\t\tif ( target.getAttribute ('id') === '1' ) {\r\n\t\t\tprops.addCount ();\r\n\t\t} else if ( target.getAttribute ('id') === '2' ) {\r\n\t\t\tprops.reset ();\r\n\r\n\t\t}\r\n\t};\r\n\r\n\tconst buttonsList = props.state.buttons.map ((el, index) => index !== 2 ?\r\n\t\t<CreatButton key={el.id} {...el} onClick={analyzeBtnStatus}\r\n\t\t\t\t\t className={styles[el.activeClassBtn]}/> : false);\r\n\r\n\treturn (\r\n\t\t<div className={styles.buttons}>\r\n\t\t\t<div className={styles.button_wrap}>\r\n\t\t\t\t{buttonsList}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport styles from './Main.module.css';\r\nimport Screen from \"./ScreenComponent/Screen\";\r\nimport Buttons from \"./ButtonsComponent/Buttons\";\r\n\r\n\r\nconst Main = (props) => {\r\n\treturn (\r\n\t\t<div className={styles.main_container}>\r\n\t\t\t<div className={styles.main_wrap}>\r\n\t\t\t\t<Screen state={props.state}/>\r\n\t\t\t\t<Buttons state={props.state} addCount={props.addCount} reset={props.reset}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\n\r\nconst CreatInput = ({id,className,type,pattern,onChange,value,state}) => {\r\n\r\n\t// value={id === '1'? state.startCountValue: id === '2' ? state.maxCountValue : ''}\r\n\r\n\treturn <input  id={id}  type={type} className={className} pattern={pattern} onChange={onChange}\r\n\t\t\t\t   placeholder='введите число'/>\r\n};\r\n\r\nexport default CreatInput;\r\n","import React from 'react';\r\nimport styles from './SetScreen.module.css';\r\nimport CreatInput from \"./CreateInput\";\r\n\r\nclass SetScreen extends React.Component {\r\n\r\n\tanalyzeInputStatus = (e) => {\r\n\t\tlet target = e.currentTarget;\r\n\r\n\t\tif(target.getAttribute('id') === '1' ){\r\n\t\t\tthis.props.setMaxValue(e);\r\n\t\t} else if(target.getAttribute('id') === '2' ){\r\n\t\t\tthis.props.setStartValue(e);\r\n\t\t}\r\n\t};\r\n\r\n\trender = () => {\r\n\t\tlet currentClass = this.props.state.inputError ? styles.input_red : '' ;\r\n\r\n\t\tconst InputList = this.props.state.inputs.map (el =><CreatInput key={el.id} type={'number'} {...el} value={el.value}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={currentClass} pattern={'^[0-9]+$'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.analyzeInputStatus} state={this.props.state}/>);\r\n\t\treturn (\r\n\t\t\t<div className={styles.screen}>\r\n\t\t\t\t<div className={styles.discr_wrap}>\r\n\t\t\t\t\t<span className={styles.discr}>max value</span>\r\n\t\t\t\t\t<span className={styles.discr}>start value</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={styles.input_wrap}>\r\n\t\t\t\t\t{InputList}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SetScreen;\r\n","import React from 'react';\r\n\r\nconst CreatButton = ({id,title,buttonStatus,onClick,className}) => {\r\n\r\n\treturn <button   disabled={buttonStatus} onClick={onClick} id={id}\r\n\t\t\t\t\t className={className}>{title}</button>\r\n};\r\n\r\nexport default CreatButton;\r\n","import React from 'react';\r\nimport styles from './SetButton.module.css';\r\nimport CreatButton from \"./ButtonCopmponent/CreateButton\";\r\n\r\nconst SetButton = (props) => {\r\n\r\n\tconst analyzeBtnStatus = (e) => {\r\n\t\tlet target = e.currentTarget;\r\n\r\n\t\tif(target.getAttribute('id') === '3' ) {\r\n\t\t\tprops.setCountValue();\r\n\t\t}\r\n\t};\r\n\r\n\tconst buttonsList = props.state.buttons.map ((el, index) =>index===2 ?\r\n\t\t\t\t\t\t\t\t\t\t\t<CreatButton key={el.id} {...el} onClick={analyzeBtnStatus}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t className={styles[el.activeClassBtn]}/> :false);\r\n\r\n\treturn (\r\n\t\t<div className={styles.buttons}>\r\n\t\t\t<div className={styles.button_wrap}>\r\n\t\t\t\t{buttonsList}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SetButton;\r\n\r\n\r\n","import React from 'react';\r\nimport styles from './SetCounter.module.css';\r\nimport SetScreen from \"./ScreenComponent/SetScreen\";\r\nimport SetButton from \"./ButtonsComponent/SetButton\";\r\n\r\nconst SetCounter = (props) => {\r\n\treturn (\r\n\t\t<div className={styles.main_container}>\r\n\t\t\t<div className={styles.main_wrap}>\r\n\t\t\t\t<SetScreen state={props.state} setMaxValue={props.setMaxValue} setStartValue={props.setStartValue}/>\r\n\t\t\t\t<SetButton state={props.state} setCountValue={props.setCountValue} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SetCounter;\r\n","import React from 'react';\nimport styles from './App.module.css'\nimport Main from \"./Main/Components/Main\";\nimport SetCounter from \"./Main/SetComponents/SetConter\";\n\n\nclass App extends React.Component {\n\tconstructor (props) {\n\t\tsuper (props);\n\t}\n\n\tstate = {\n\n\t\tstartCountValue: 0,\n\t\tmaxCountValue: 0,\n\t\tstartCountStore: 0,\n\t\tmaxCountStore: 0,\n\t\tscreenTitle: 'input value and press \"Set\"',\n\t\tcountColor: 'text', // 'red' 'green' 'error'\n\t\tinputError: false,\n\t\tbuttons: [\n\t\t\t{ id: 1, title: 'Inc', buttonStatus: true, activeClassBtn: 'button_green' },\n\t\t\t{ id: 2, title: 'Reset', buttonStatus: true, activeClassBtn: 'button_red' },\n\t\t\t{ id: 3, title: 'Set', buttonStatus: true, activeClassBtn: 'button_green' },\n\t\t],\n\t\tinputs: [\n\t\t\t{ id: 1, activeClassInp: '', },\n\t\t\t{ id: 2, activeClassInp: '', },\n\t\t]\n\n\t};\n\n\tcomponentDidMount () {\n\t\tthis.restoreState ();\n\t};\n\n\tsaveState = () => {\n\t\tlet stateAsString = JSON.stringify ( this.state);\n\t\tlocalStorage.setItem ('count-state', stateAsString);\n\t};\n\n\trestoreState = () => {\n\t\tlet state = {\n\t\t\tstartCountValue: 0,\n\t\t\tmaxCountValue: 0,\n\t\t\tstartCountStore: 0,\n\t\t\tmaxCountStore: 0,\n\t\t\tscreenTitle: 'input value and press \"Set\"',\n\t\t\tcountColor: 'text', // 'red' 'green' 'error'\n\t\t\tinputError: false,\n\t\t\tbuttons: [\n\t\t\t\t{ id: 1, title: 'Inc', buttonStatus: true, activeClassBtn: 'button_green' },\n\t\t\t\t{ id: 2, title: 'Reset', buttonStatus: true, activeClassBtn: 'button_red' },\n\t\t\t\t{ id: 3, title: 'Set', buttonStatus: true, activeClassBtn: 'button_green' },\n\t\t\t],\n\t\t\tinputs: [\n\t\t\t\t{ id: 1, activeClassInp: '', },\n\t\t\t\t{ id: 2, activeClassInp: '', },\n\t\t\t]\n\t\t};\n\t\tlet stateAsString = localStorage.getItem ('count-state');\n\t\tif ( stateAsString !== null ) {\n\t\t\tstate = JSON.parse (stateAsString);\n\t\t}\n\t\tthis.setState  (state);\n\t};\n\n\taddCount = () => {\n\t\tif ( this.state.startCountValue < this.state.maxCountValue ) {\n\t\t\tthis.setState ({\n\t\t\t\tstartCountValue: this.state.startCountValue + 1,\n\t\t\t}, () => {\n\t\t\t\tthis.saveState ();\n\t\t\t\tif ( this.state.startCountValue === this.state.maxCountValue ) {\n\t\t\t\t\tthis.setState ({\n\t\t\t\t\t\tcountColor: 'red',\n\t\t\t\t\t\tscreenTitle: this.state.startCountValue,\n\t\t\t\t\t\tbuttons: this.state.buttons.map (button => {\n\t\t\t\t\t\t\tif ( button.id === 1 ) {\n\t\t\t\t\t\t\t\treturn { ...button, buttonStatus: true, activeClassBtn: 'button_red' }\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn button\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState ({\n\t\t\t\t\t\tscreenTitle: this.state.startCountValue\n\t\t\t\t\t}, () => {this.saveState ();})\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\treset = () => {\n\t\tthis.setState ({\n\t\t\tcountColor: 'green',\n\t\t\tscreenTitle: this.state.startCountStore,\n\t\t\tstartCountValue: this.state.startCountStore,\n\t\t\tmaxCountValue: this.state.maxCountStore,\n\t\t\tbuttons: this.state.buttons.map (button => {\n\t\t\t\tif ( button.id === 1 ) {\n\t\t\t\t\treturn { ...button, buttonStatus: false, activeClassBtn: 'button_green' }\n\t\t\t\t} else {\n\t\t\t\t\treturn button\n\t\t\t\t}\n\t\t\t})\n\t\t}, () => {this.saveState ();});\n\t};\n\n\tsetCountValue = () => {\n\t\tthis.setState ({\n\t\t\t// startCountValue: this.state.startCountValue,\n\t\t\t// maxCountValue: this.state.maxCountValue,\n\t\t\tstartCountStore: this.state.startCountValue,\n\t\t\tmaxCountStore: this.state.maxCountValue,\n\t\t\tcountColor: 'green',\n\t\t\t// screenTitle: this.state.startCountValue,\n\t\t\tscreenTitle: this.state.startCountValue,\n\t\t\tbuttons: this.state.buttons.map (button => {\n\t\t\t\tif ( button.id === 1 || button.id === 2 ) {\n\t\t\t\t\treturn { ...button, buttonStatus: false }\n\t\t\t\t} else if ( button.id === 3 ) {\n\t\t\t\t\treturn { ...button, buttonStatus: true }\n\t\t\t\t} else {\n\t\t\t\t\treturn button\n\t\t\t\t}\n\t\t\t})\n\t\t}, () => {this.saveState ();});\n\t};\n\n\trepeatCode = (currentCount) => {\n\t\tif ( currentCount < 0 || this.state.maxCountValue < this.state.startCountValue ||\n\t\t\tthis.state.maxCountValue === this.state.startCountValue ) {\n\t\t\tthis.setState ({\n\t\t\t\tinputError: true,\n\t\t\t\tscreenTitle: 'Incorrect value',\n\t\t\t\tcountColor: 'error',\n\t\t\t\tbuttons: this.state.buttons.map (button => {\n\t\t\t\t\tif ( button.id === 3 ) {\n\t\t\t\t\t\treturn { ...button, buttonStatus: true }\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn button\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}, () => {this.saveState ();});\n\t\t} else {\n\t\t\tthis.setState ({\n\t\t\t\tscreenTitle: 'input value and press \"Set\"',\n\t\t\t\tcountColor: 'text',\n\t\t\t\tinputError: false,\n\t\t\t\tbuttons: this.state.buttons.map (button => {\n\t\t\t\t\tif ( button.id === 1 || button.id === 2 ) {\n\t\t\t\t\t\treturn { ...button, buttonStatus: true }\n\t\t\t\t\t} else if ( button.id === 3 ) {\n\t\t\t\t\t\treturn { ...button, buttonStatus: false }\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn button\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}, () => {this.saveState ();});\n\t\t}\n\t};\n\n\tsetMaxValue = (e) => {\n\t\tthis.setState ({\n\t\t\tmaxCountValue: +e.currentTarget.value,\n\t\t}, () => {this.repeatCode (this.state.maxCountValue)});\n\t};\n\tsetStartValue = (e) => {\n\t\tthis.setState ({\n\t\t\tstartCountValue: +e.currentTarget.value,\n\t\t}, () => {this.repeatCode (this.state.startCountValue)});\n\t};\n\n\trender = () => {\n\t\treturn (\n\t\t\t<div className={styles.main}>\n\t\t\t\t<SetCounter state={this.state} setCountValue={this.setCountValue} setMaxValue={this.setMaxValue}\n\t\t\t\t\t\t\tsetStartValue={this.setStartValue}/>\n\t\t\t\t<Main state={this.state} addCount={this.addCount} reset={this.reset}/>\n\t\t\t</div>\n\n\t\t);\n\t}\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}